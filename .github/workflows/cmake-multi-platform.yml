name: CMake on multiple platforms

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        qt-version: [5.15.2]
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl

    steps:
    - uses: actions/checkout@v4

    - name: Set reusable strings
      id: strings
      shell: bash
      run: echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Install dependencies on Windows
      if: matrix.os == 'windows-latest'
      run: |
        Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))
        choco install -y strawberryperl python visualstudio2022buildtools visualstudio2022-workload-vctools ninja cmake git
        
    - name: Install Visual Studio Build Tools
      if: matrix.os == 'windows-latest'
      run: |
        choco install -y visualstudio2022buildtools
        choco install -y visualstudio2022-workload-vctools

    - name: Add Visual Studio to PATH
      if: matrix.os == 'windows-latest'
      shell: cmd
      run: |
         setx PATH "%PATH%;C:\Program Files (x86)\Microsoft Visual Studio\2022\BuildTools\VC\Tools\MSVC\*\bin\Hostx64\x64"
       
    - name: Set up MSVC environment
      if: matrix.os == 'windows-latest'
      shell: cmd
      run: |
         call "C:\Program Files (x86)\Microsoft Visual Studio\2022\BuildTools\VC\Auxiliary\Build\vcvarsall.bat" x64
 
    - name: Set Visual Studio Path Manually
      if: matrix.os == 'windows-latest'
      shell: bash
      run: |
         VS_PATH="C:/Program Files (x86)/Microsoft Visual Studio/2022/BuildTools"
         echo "VS_PATH=$VS_PATH"
         echo "$VS_PATH/VC/Tools/MSVC/14.29.30133/bin/Hostx64/x64" >> $GITHUB_PATH
 
    - name: Set up MSVC environment and persist to GitHub Actions
      if: matrix.os == 'windows-latest'
      shell: cmd
      run: |
         call "C:\Program Files (x86)\Microsoft Visual Studio\2022\BuildTools\VC\Auxiliary\Build\vcvarsall.bat" x64
         echo "PATH=%PATH%" >> %GITHUB_ENV%

    - name: Download Qt source code on Windows
      if: matrix.os == 'windows-latest'
      run: |
        curl -L -o qt-everywhere-src-5.15.2.zip https://download.qt.io/official_releases/qt/5.15/5.15.2/single/qt-everywhere-src-5.15.2.zip
        tar -xf qt-everywhere-src-5.15.2.zip

    - name: Configure, Build and Install Qt on Windows
      if: matrix.os == 'windows-latest'
      shell: cmd
      run: |
        call "C:\Program Files (x86)\Microsoft Visual Studio\2022\BuildTools\VC\Auxiliary\Build\vcvarsall.bat" x64
        where nmake
        cd D:\a\APO-Lab-App\APO-Lab-App\qt-everywhere-src-5.15.2
        cd qtbase
        configure.bat -top-level -platform win32-msvc -opensource -confirm-license -release -nomake tests -nomake examples
        cd ..
        cd build
        nmake
        nmake install

    - name: Install Qt on Ubuntu
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get install qtbase5-dev qtchooser qt5-qmake qtbase5-dev-tools

    - name: Install OpenCV on Ubuntu
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libopencv-dev

    - name: Install OpenCV on Windows
      if: matrix.os == 'windows-latest'
      run: |
        choco install -y opencv
        Move-Item -Path "C:/tools/opencv" -Destination "C:/opencv"

    - name: Configure CMake with Qt on Windows
      if: matrix.os == 'windows-latest'
      shell: cmd
      run: |
        call "C:\Program Files (x86)\Microsoft Visual Studio\2022\BuildTools\VC\Auxiliary\Build\vcvarsall.bat" x64
        set QT_DIR=C:\Qt\Qt-5.15.2\lib\cmake\Qt5
        set CMAKE_PREFIX_PATH=C:\Qt\Qt-5.15.2\lib\cmake\Qt5
        cmake -B D:\a\APO-Lab-App\APO-Lab-App/build -DCMAKE_CXX_COMPILER=cl -DCMAKE_C_COMPILER=cl -DCMAKE_BUILD_TYPE=Release


    - name: Configure CMake on Ubuntu
      if: matrix.os == 'ubuntu-latest'
      run: |
        cmake -B ${{ steps.strings.outputs.build-output-dir }} -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}

    - name: Build
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      run: ctest --build-config ${{ matrix.build_type }}
