name: CMake on multiple platforms

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        qt-version: [6.8.2]
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl

    steps:
    - uses: actions/checkout@v4

    - name: Set reusable strings
      id: strings
      shell: bash
      run: echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Cache CMake build files
      uses: actions/cache@v3
      with:
        path: ${{ steps.strings.outputs.build-output-dir }}
        key: ${{ runner.os }}-cmake-${{ matrix.c_compiler }}-${{ matrix.build_type }}-${{ hashFiles('**/CMakeLists.txt') }}
        restore-keys: |
          ${{ runner.os }}-cmake-${{ matrix.c_compiler }}-${{ matrix.build_type }}-

    - name: Cache APT packages
      if: matrix.os == 'ubuntu-latest'
      uses: actions/cache@v3
      with:
        path: /home/runner/aptcache
        key: ubuntu-apt-${{ matrix.os }}-${{ matrix.c_compiler }}-${{ matrix.build_type }}-${{ hashFiles('.github/workflows/**') }}
        restore-keys: |
          ubuntu-apt-${{ matrix.os }}-${{ matrix.c_compiler }}-
          ubuntu-apt-${{ matrix.os }}-
          ubuntu-apt-

    - name: Install dependencies on Windows
      if: matrix.os == 'windows-latest'
      run: |
        choco install -y strawberryperl python ninja cmake git aqt visualstudio2022buildtools visualstudio2022-workload-vctools 

    - name: Cache Qt AQT installation (Windows)
      if: matrix.os == 'windows-latest'
      uses: actions/cache@v3
      with:
        path: 6.8.2
        key: windows-qt-6.8.2

    - name: Install Qt on Windows
      if: matrix.os == 'windows-latest'
      run: |
        aqt install-qt windows desktop 6.8.2 win64_msvc2022_64 -m qtcharts

    - name: Restore cached APT .deb files
      if: matrix.os == 'ubuntu-latest'
      run: |
        if [ -d /home/runner/aptcache ]; then
          sudo cp /home/runner/aptcache/*.deb /var/cache/apt/archives/ || true
        fi

    - name: Install dependencies and filter APT cache on Ubuntu
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        echo -------------------------------------------------------------------------------------------------------------
        sudo apt-get install -y python3-pip
        echo -------------------------------------------------------------------------------------------------------------
        pip install aqtinstall
        echo -------------------------------------------------------------------------------------------------------------
        sudo apt-get install -y libopencv-dev qt6-base-dev
        echo -------------------------------------------------------------------------------------------------------------
        pwd
        aqt install-qt linux desktop 6.8.2 linux_gcc_64 -m qtcharts
        mkdir -p /home/runner/aptcache
        sudo find /var/cache/apt/archives/ -type f -name '*.deb' -size -20M -exec cp --parents {} /home/runner/aptcache/ \;
        sudo chown -R $(whoami) /home/runner/aptcache


    - name: Cache OpenCV binaries (Windows)
      if: matrix.os == 'windows-latest'
      uses: actions/cache@v3
      with:
        path: C:/tools/opencv
        key: windows-opencv

    - name: Install OpenCV on Windows
      if: matrix.os == 'windows-latest'
      run: |
        if (!(Test-Path "C:/tools/opencv")) {
          choco install -y opencv
        }
        New-Item -ItemType SymbolicLink -Path "C:/opencv" -Target "C:/tools/opencv"

    - name: Configure CMake for Windows
      if: matrix.os == 'windows-latest'
      run: |
        cmake -B ${{ steps.strings.outputs.build-output-dir }} -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DCMAKE_PREFIX_PATH=D:\a\APO-Lab-App\APO-Lab-App\6.8.2\msvc2022_64\lib\cmake


    - name: Configure CMake for Ubuntu
      if: matrix.os == 'ubuntu-latest'
      run: |
        cmake -B ${{ steps.strings.outputs.build-output-dir }} \
              -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} \
              -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} \
              -DCMAKE_PREFIX_PATH="/home/runner/work/APO-Lab-App/APO-Lab-App/6.8.2/gcc_64/lib/cmake" \
              -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}

    - name: Build
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Upload build artifacts (Windows)
      if: matrix.os == 'windows-latest'
      uses: actions/upload-artifact@v4
      with:
        name: windows-build
        path: ${{ steps.strings.outputs.build-output-dir }}

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      run: ctest --build-config ${{ matrix.build_type }}
